#include <SPI.h>
#include <SD.h>
#include <Wire.h>
#include <GyverOLED.h>
#include "Boot.h"
#include "egg.h"

// Определяем глобальные объекты
GyverOLED<SSD1306_128x64, OLED_BUFFER> Display::oled;
CommandParser commandParser;  // Определение глобального объекта
//GyverOLED<SSD1306_128x64, OLED_BUFFER> oled;
// Конфигурация
const uint8_t SD_CS = 7;
const uint8_t BTN_LEFT = 10;
const uint8_t BTN_CENTER = 1;
const uint8_t BTN_RIGHT = 0;
const uint8_t VISIBLE_FILES = 3;
const uint8_t LINE_HEIGHT = 12;
const uint8_t MARGIN = 2;

DinoGame dinoGame(Display::oled, BTN_RIGHT);

const uint8_t bitmap_128x63[] PROGMEM = {
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0xFC, 0xFC, 0x7C, 0xFC, 0xF8, 0xF8, 0xF0, 0xF0, 0xE0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0x7C, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF8, 0xF0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0x8F, 0x0F, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x81, 0xE3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0x80, 0x00, 0x00, 0x07, 0x0F, 0x0F, 0x8F, 0xCF, 0xE3, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFE, 0xBF, 0x3F, 0x3F, 0x3F, 0xBF, 0x3F, 0x3F, 0x3F, 0xBE, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3B, 0xBF, 0x3F, 0x3F, 0xBF, 0x39, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBE, 0x3F, 0x3F, 0xBF, 0xBF, 0x3F, 0x3F, 0x3F, 0xBF, 0xFE, 0xFE, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x3F, 0xD7, 0xEB, 0xBF, 0x57, 0xFF, 0x5F, 0xFF, 0x5F, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0x7F, 0xDF, 0xBF, 0x7F, 0xAF, 0xDB, 0x77, 0xAF, 0x5B, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x38, 0xEE, 0x52, 0xBE, 0x69, 0xD3, 0xBA, 0x51, 0xFB, 0x51, 0x6B, 0xDD, 0xB7, 0xDB, 0xB7, 0x6D, 0xB7, 0x6D, 0xDB, 0xB7, 0xDB, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xEF, 0xFF, 0xFF, 0xB5, 0xEF, 0xB5, 0xEF, 0x5F, 0xAF, 0xFF, 0x2F, 0xFF, 0xAF, 0xDF, 0xB5, 0xEB, 0xDE, 0xFF, 0xFF, 0xBF, 0xEF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xAD, 0x5B, 0xF7, 0x9D, 0xF7, 0xAB, 0xDD, 0xB7, 0x6F, 0xD5, 0xBB, 0x69, 0xD2, 0xBB, 0x69, 0xD3, 0xB9, 0x6A, 0xD6, 0xBC, 0x54, 0x28, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x0F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x0D, 0x06, 0x03, 0x01, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x07, 0x00, 0x01, 0x01, 0x0F, 0x0F, 0x6F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x01, 0x00, 0x01, 0x06, 0x0D, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
};

// Меню
String fileList[20];
uint8_t fileCount = 0;
uint8_t selectedIndex = 0;

void setup() {
    Serial.begin(115200);
    initDisplay();
    initButtons();
    

    oled.drawBitmap(0, 0, bitmap_128x63, 128, 63);
    oled.update();
    delay(2000);
    oled.clear();   
    
    bool sdOk = initSDCard();
    bool filesOk = sdOk ? scanFiles() : false;

        if (!sdOk || !filesOk) {
        // Если SD-карта не работает, запускаем игру при нажатии кнопок
        oled.clear();
        oled.setCursorXY(10, 20);
        oled.print("SD Card Error");
        oled.setCursorXY(10, 35);
        oled.print("Press BTN to play");
        oled.update();
        
        while (true) {
            if (!digitalRead(BTN_LEFT) || !digitalRead(BTN_RIGHT)) {
                dinoGame.setup();
                while (true) {
                    dinoGame.loop();
                }
            }
            delay(50);
        }
    }
    
    while (true) {
        drawMenu();
        handleButtons(); 
    }
}

void loop() {}

void initDisplay() {
    Wire.begin(8, 9);
    oled.init();
    oled.clear();
    oled.setScale(1);
}

void initButtons() {
    pinMode(BTN_LEFT, INPUT_PULLUP);
    pinMode(BTN_CENTER, INPUT_PULLUP);
    pinMode(BTN_RIGHT, INPUT_PULLUP);
}

bool initSDCard() {
    return SD.begin(SD_CS, SPI, 4000000);
}

bool scanFiles() {
    File root = SD.open("/");
    if (!root) return false;
    
    while (File file = root.openNextFile()) {
        if (!file.isDirectory() && file.name()[0] != '.' && fileCount < 20) {
            fileList[fileCount++] = file.name();
        }
    }
    return fileCount > 0;
}

void drawMenu() {
    oled.clear();
    
    // Заголовок
    oled.setCursorXY(MARGIN, 0);
    oled.print("FrogeeCore BootLoader");
    
    // Отображение 3 файлов
    for (uint8_t i = 0; i < VISIBLE_FILES; i++) {
        uint8_t fileNum = selectedIndex - 1 + i;
        
        // Коррекция для крайних положений
        if (selectedIndex == 0) fileNum = i;
        else if (selectedIndex == fileCount - 1) fileNum = fileCount - VISIBLE_FILES + i;
        
        if (fileNum >= fileCount) continue;
        
        uint8_t yPos = 12 + i * LINE_HEIGHT;
        
        // Курсор-стрелка для выбранного файла
        oled.setCursorXY(MARGIN, yPos);
        if (fileNum == selectedIndex) {
            oled.print(">");
        } else {
            oled.print(" ");
        }
        
        // Имя файла
        oled.setCursorXY(MARGIN + 8, yPos);
        String name = fileList[fileNum];
        if (name.length() > 18) name = name.substring(0, 15) + "...";
        oled.print(name);
    }
    
    // Статус бар (без разделительной линии)
    oled.setCursorXY(MARGIN, 55);
    oled.print(selectedIndex + 1);
    oled.print("/");
    oled.print(fileCount);
    oled.print("  <Select>  [Run]");
    
    oled.update();
}

void handleButtons() {
    static uint32_t lastPress = 0;
    if (millis() - lastPress < 200) return;
    
    if (!digitalRead(BTN_LEFT)) {
        if (selectedIndex > 0) selectedIndex--;
        lastPress = millis();
    }
    
    if (!digitalRead(BTN_RIGHT)) {
        if (selectedIndex < fileCount - 1) selectedIndex++;
        lastPress = millis();
    }
    
    if (!digitalRead(BTN_CENTER)) {
        boot.executeSelectedFile(fileList[selectedIndex]);  // Передаем имя файла как аргумент
    }
}

void showFatalError(String msg) {
    oled.clear();
    oled.setCursorXY(10, 20);
    oled.print("FATAL ERROR:");
    oled.setCursorXY(10, 35);
    oled.print(msg);
    oled.update();
    while(true);
}